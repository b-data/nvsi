.before-script-build: &before-script-build
  - |
    if [ ! -z "$CI_BUILD_PLATFORMS" ]; then
      export OS_ARCH=$(echo $CI_BUILD_PLATFORMS | tr ' ' '\n' | \
        sed 's|\/||2' | sed 's|\/|-|' | tr '\n' ' ')
    fi
  - export CI_APP_REPO=${CI_APP_REPO:-$CI_REGISTRY_IMAGE}
  - >
    echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER
    --password-stdin $CI_REGISTRY

.build:
  image: glcr.b-data.ch/docker/docker:dind
  stage: build
  services:
    - name: glcr.b-data.ch/docker/docker:dind
      alias: docker
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "/certs"
    BUILDX_NO_DEFAULT_ATTESTATIONS: "true"
  before_script:
    - *before-script-build

build:version-linux-amd64:
  extends: .build
  tags:
    - arch:amd64
    - os:linux
  script:
    - >
      docker build
      --build-arg TAG
      --build-arg BUILD_TYPE=Release
      --build-arg MODE=install-strip
      -t $CI_APP_REPO:$TAG-linux-amd64
      -f build.Dockerfile .
    - docker push $CI_APP_REPO:$TAG-linux-amd64
    - |
      if [[ "$TAG_LATEST" == "true" ]]; then
        docker tag $CI_APP_REPO:$TAG-linux-amd64 \
          $CI_APP_REPO:latest-linux-amd64
        docker push $CI_APP_REPO:latest-linux-amd64
      fi
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $CI_BUILD_PLATFORMS =~ /(linux\/amd64)/
      changes:
        - build.Dockerfile

build:version-linux-arm64v8:
  extends: .build
  tags:
    - arch:arm64/v8
    - os:linux
  script:
    - >
      docker build
      --build-arg TAG
      --build-arg BUILD_TYPE=Release
      --build-arg MODE=install-strip
      -t $CI_APP_REPO:$TAG-linux-arm64v8
      -f build.Dockerfile .
    - docker push $CI_APP_REPO:$TAG-linux-arm64v8
    - |
      if [[ "$TAG_LATEST" == "true" ]]; then
        docker tag $CI_APP_REPO:$TAG-linux-arm64v8 \
          $CI_APP_REPO:latest-linux-arm64v8
        docker push $CI_APP_REPO:latest-linux-arm64v8
      fi
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $CI_BUILD_PLATFORMS =~ /(linux\/arm64\/v8)/
      changes:
        - build.Dockerfile

build-manifest:version-linux-multiarch:
  extends: .build
  needs: ["build:version-linux-amd64", "build:version-linux-arm64v8"]
  script:
    - |
      for i in $OS_ARCH; do
        export CI_MANIFEST_LIST="$CI_MANIFEST_LIST $CI_APP_REPO:$TAG-$i"
      done
    - |
      docker manifest create $CI_APP_REPO:$TAG $CI_MANIFEST_LIST
      if echo $OS_ARCH | grep "linux-arm64v8" > /dev/null ; then
        docker manifest annotate --variant v8 $CI_APP_REPO:$TAG \
          $CI_APP_REPO:$TAG-linux-arm64v8
      fi
      docker manifest push $CI_APP_REPO:$TAG
    - |
      if [[ "$TAG_LATEST" == "true" ]]; then
        docker manifest create $CI_APP_REPO:latest $CI_MANIFEST_LIST
        if echo $OS_ARCH | grep "linux-arm64v8" > /dev/null ; then
          docker manifest annotate --variant v8 $CI_APP_REPO:latest \
            $CI_APP_REPO:$TAG-linux-arm64v8
        fi
        docker manifest push $CI_APP_REPO:latest
      fi
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      changes:
        - build.Dockerfile

build:nightly-linux-amd64:
  extends: .build
  tags:
    - arch:amd64
    - os:linux
  script:
    - >
      docker build
      -t $CI_APP_REPO:nightly-linux-amd64
      -f build.Dockerfile .
    - docker push $CI_APP_REPO:nightly-linux-amd64
  rules:
    - if: $CI_COMMIT_BRANCH == "develop" && $CI_BUILD_PLATFORMS =~ /(linux\/amd64)/
      changes:
        - build.Dockerfile

build:nightly-linux-arm64v8:
  extends: .build
  tags:
    - arch:arm64/v8
    - os:linux
  script:
    - >
      docker build
      -t $CI_APP_REPO:nightly-linux-arm64v8
      -f build.Dockerfile .
    - docker push $CI_APP_REPO:nightly-linux-arm64v8
  rules:
    - if: $CI_COMMIT_BRANCH == "develop" && $CI_BUILD_PLATFORMS =~ /(linux\/arm64\/v8)/
      changes:
        - build.Dockerfile

build-manifest:nightly-linux-multiarch:
  extends: .build
  needs: ["build:nightly-linux-amd64", "build:nightly-linux-arm64v8"]
  script:
    - |
      for i in $OS_ARCH; do
        export CI_MANIFEST_LIST="$CI_MANIFEST_LIST $CI_APP_REPO:nightly-$i"
      done
    - |
      docker manifest create $CI_APP_REPO:nightly $CI_MANIFEST_LIST
      if echo $OS_ARCH | grep "linux-arm64v8" > /dev/null ; then
        docker manifest annotate --variant v8 $CI_APP_REPO:nightly \
          $CI_APP_REPO:nightly-linux-arm64v8
      fi
      docker manifest push $CI_APP_REPO:nightly
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
      changes:
        - build.Dockerfile
